---
- name: Setup Project Stack
  hosts: localhost
  connection: local
  gather_facts: no
  tasks:
    - name: Import VPC Setup Variables
      include_vars: vars/vpc-output_vars

    - name: Import Site Setup Variables
      include_vars: vars/stack_setup.yml

    - name: Create EC2 keypair for site instances
      ec2_key:
        name: sitekey
        region: "{{region}}"
      register: sitekey_out

    - name: Save login key into file
      copy:
        content: "{{sitekey_out.key.private_key}}"
        dest: "./site_loginkey.pem"
        mode: 0600
      when: sitekey_out.changed

    - name: Create security group for Load Balancer
      amazon.aws.ec2_security_group:
        name: LB-SG
        description: Security Group of LB
        vpc_id: "{{vpcid}}"
        region: "{{region}}"
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
      register: LBsg_out

    - name: Create security group for Site Stack
      amazon.aws.ec2_security_group:
        name: EC2-SG
        description: Security group of site instances
        vpc_id: "{{vpcid}}"
        region: "{{region}}"
        purge_rules: no
        rules:
          - proto: tcp
            ports: 22
            group_id: "{{bastionsgOUT}}"

          - proto: tcp
            from_port: 80
            to_port: 80
            group_id: "{{LBsg_out.group_id}}"
      register: EC2sg_out

    - name: Update stack security group for internal traffic
      amazon.aws.ec2_security_group:
        name: EC2-SG
        description: Security group of site instances
        vpc_id: "{{vpcid}}"
        region: "{{region}}"
        purge_rules: no
        rules:
          - proto: all
            group_id: "{{EC2sg_out.group_id}}"

    - name: Run shell script to get instance ID
        command:
          ./get_instance_id.sh
        register: instance_id_output
    

    - name: Fetch the VPC ID of Ansible Control Machine
      amazon.aws.ec2_instance_info:
        region: "{{ region }}"
        instance_ids:
          - "{{ instance_id_output }}"
      register: instance_info

    - name: Set the Ansible VPC ID Fact
      ansible.builtin.set_fact:
        ansiblevpcid: "{{ instance_info.instances[0].vpc_id }}"
        ansiblevpcCidr: "{{ instance_info.instances[0].network_interfaces[0].subnet.cidr_block }}"

    - name: Debug Ansible VPC ID and CIDR
      ansible.builtin.debug:
        msg: 
          - "Ansible VPC ID: {{ ansiblevpcid }}"
          - "Ansible VPC CIDR: {{ ansiblevpcCidr }}"

    - name: Create VPC Peering Connection
      community.aws.ec2_vpc_peer:
        name: AnsibleToProjectPeering
        vpc_id: "{{ ansiblevpcid }}"  # VPC of the Ansible control machine
        peer_vpc_id: "{{ vpcid }}"  # New VPC from earlier playbook
        peer_region: "{{ region }}"
        auto_accept: true
      register: vpc_peering

    - name: Create a new route table for Ansible VPC
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ ansiblevpcid }}"
        region: "{{ region }}"
        tags:
          Name: AnsibleVPC_RT
      register: ansible_route_table

    - name: Add route to the newly created Ansible VPC route table
      amazon.aws.ec2_vpc_route_table:
        route_table_id: "{{ ansible_route_table.id }}"  # Use the newly created route table ID
        dest: "{{ vpcCidr }}"  # CIDR of the new VPC
        vpc_peering_id: "{{ vpc_peering.peering.id }}"
        state: present

    - name: Add route to the deployed VPC route table
      amazon.aws.ec2_vpc_route_table:
        route_table_id: "{{ pubRTid }}"  # ID of the route table in the deployed VPC
        region: "{{ region }}"
        routes:
        - dest: "{{ ansiblevpcCidr }}"  # CIDR block of the Ansible VPC
          vpc_peering_id: "{{ vpc_peering.peering.id }}"

    - name: Update Bastion Security Group to Allow Traffic Between VPCs
      amazon.aws.ec2_security_group:
        group_id: "{{ bastionsgOUT }}"  # Security group for the bastion host
        region: "{{ region }}"
        rules:
          - proto: all
            cidr_ip: "{{ ansiblevpcCidr }}"

    - name: Update web01 Security Group to Allow Traffic Between VPCs
      amazon.aws.ec2_security_group:
        group_id:  "{{EC2sg_out.group_id}}"  # Security group for the bastion host
        region: "{{ region }}"
        rules:
          - proto: all
            cidr_ip: "{{ ansiblevpcCidr }}"

    - name: Creating Nginx instance (web01)
      amazon.aws.ec2_instance:
        name: "web01"
        region: "{{region}}"
        key_name: sitekey
        wait: yes
        exact_count: 1
        vpc_subnet_id: "{{pubsub1id}}"
        instance_type: t2.micro
        security_group: "{{EC2sg_out.group_id}}"
        network_interfaces:
          - assign_public_ip: true
        image_id: "{{nginx_ami}}"
        tags:
          Project: Web
      register: web01_out
      
    - name: Wait for web01 instance to be in running state
      amazon.aws.ec2_instance_info:
        region: "{{ region }}"
        instance_ids:
          - "{{ web01_out.instances[0].instance_id }}"
      register: instance_info
      until: instance_info.instances[0].state.name == 'running'
      retries: 60  # Increase the number of retries
      delay: 10    # Decrease the delay between retries
        
    - name: Create a target group with a default health check
      community.aws.elb_target_group:
        name: webtargetgroup
        region: "{{region}}"
        protocol: http
        port: 80
        vpc_id: "{{vpcid}}"
        targets:
          - Id: "{{web01_out.instances[0].instance_id}}"
            Port: 80
        state: present

    - name: Create the Application Load Balancer from the web instances
      amazon.aws.elb_application_lb:
        name: ALB
        region: "{{region}}"
        security_groups:
          - "{{ LBsg_out.group_id }}"
        subnets:
          - "{{pubsub1id}}"
          - "{{pubsub2id}}"
          - "{{pubsub3id}}"
        listeners:
          - Protocol: HTTP # Required. The protocol for connections from clients to the load balancer (HTTP or HTTPS) (case-sensitive).
            Port: 80 # Required. The port on which the load balancer is listening.
            # The security policy that defines which ciphers and protocols are supported. The default is the current predefined security policy.
            DefaultActions:
              - Type: forward # Required.
                TargetGroupName: webtargetgroup
        state: present

    - name: Insert Private IPs of Web Machines to a file
      blockinfile:
        path: "provisioning/group_vars/hostsip"
        block: |
          web01: {{web01_out.instances[0].network_interfaces[0].private_ip_address}}

    - name: Copy login key to provisioning directory
      copy:
        src: "./site_loginkey.pem"
        dest: "provisioning/site_loginkey.pem"
        mode: 0400

    - name: Create Dynamic Inventory
      blockinfile:
        path: "provisioning/inventory"
        block: |
          web01 ansible_host={{web01_out.instances[0].network_interfaces[0].private_ip_address}}
          cntl ansible_host=127.0.0.1 ansible_connection=local
          [websrvgrp]
          web01
          
          [control]
          cntl
          
          [stack_inst:children]
          websrvgrp

          [stack_inst:vars]
          ansible_user=ubuntu
          ansible_ssh_private_key_file=site_loginkey.pem


