---
- name: Setup Project Stack
  hosts: localhost
  connection: local
  gather_facts: no
  tasks:
    - name: Import VPC Setup Variables
      include_vars: vars/vpc-output_vars

    - name: Import Site Setup Variables
      include_vars: vars/stack_setup.yml

    - name: Create EC2 keypair for site instances
      ec2_key:
        name: sitekey
        region: "{{ region }}"
      register: sitekey_out

    - name: Save login key into file
      copy:
        content: "{{ sitekey_out.key.private_key }}"
        dest: "./site_loginkey.pem"
        mode: 0600
      when: sitekey_out.changed

    - name: Create security group for Load Balancer
      amazon.aws.ec2_security_group:
        name: LB-SG
        description: Security Group of LB
        vpc_id: "{{ vpcid }}"
        region: "{{ region }}"
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
      register: LBsg_out

    - name: Create security group for site stack
      amazon.aws.ec2_security_group:
        name: EC2-SG
        description: Security group of site instances
        vpc_id: "{{ vpcid }}"
        region: "{{ region }}"
        rules:
          - proto: tcp
            ports: 22
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 80
            to_port: 80
            group_id: "{{ LBsg_out.group_id }}"
      register: EC2sg_out

    - name: Create Launch Template for ASG
      community.aws.ec2_launch_template:
        name: web_launch_template
        region: "{{ region }}"
        key_name: sitekey
        instance_type: t2.micro
        image_id: "{{ nginx_ami }}"
        network_interfaces:
          - device_index: 0
            associate_public_ip_address: true
            groups:
              - "{{ EC2sg_out.group_id }}"
      register: launch_template


    - name: Create Target Group
      community.aws.elb_target_group:
        name: webtargetgroup
        region: "{{ region }}"
        protocol: http
        port: 80
        vpc_id: "{{ vpcid }}"
        state: present
      register: webtargetgroup


    - name: Create Application Load Balancer
      amazon.aws.elb_application_lb:
        name: ALB
        region: "{{ region }}"
        security_groups:
          - "{{ LBsg_out.group_id }}"
        subnets:
          - "{{ pubsub1id }}"
          - "{{ pubsub2id }}"
          - "{{ pubsub3id }}"
        listeners:
          - Protocol: HTTP
            Port: 80
            DefaultActions:
              - Type: forward
                TargetGroupArn: "{{ webtargetgroup.target_group_arn }}"
      register: alb_out

    - debug:
        var: alb_out

    - name: Create Auto Scaling Group
      community.aws.ec2_asg:
        name: web_asg
        region: "{{ region }}"
        min_size: 3
        max_size: 5
        desired_capacity: 3
        launch_template:
          launch_template_id: "{{ launch_template.template.launch_template_id }}"
          version: "{{ launch_template.template.latest_version_number }}"
        vpc_zone_identifier:
          - "{{ pubsub1id }}"
          - "{{ pubsub2id }}"
          - "{{ pubsub3id }}"
        target_group_arns:
          - "{{ webtargetgroup.target_group_arn }}"
        health_check_type: EC2  # Faster EC2 health checks
        health_check_period: 60
        wait_for_instances: false

    - name: Create Scaling Policy for CPU Utilization
      community.aws.autoscaling_policy:
        name: cpu_policy
        scaling_group_name: web_asg
        region: "{{ region }}"
        adjustment_type: ChangeInCapacity
        cooldown: 300
        state: present
        scaling_adjustment: 1
        metric_aggregation_type: Average
        policy_type: TargetTrackingScaling
        target_tracking_configuration:
          predefined_metric_specification:
            predefined_metric_type: ASGAverageCPUUtilization
          target_value: 70.0

    - name: Create Scaling Policy for Request Count per Target
      community.aws.autoscaling_policy:
        name: request_count_policy
        scaling_group_name: web_asg
        region: "{{ region }}"
        adjustment_type: ChangeInCapacity
        cooldown: 300
        state: present
        scaling_adjustment: 1
        policy_type: TargetTrackingScaling
        target_tracking_configuration:
          predefined_metric_specification:
            predefined_metric_type: ALBRequestCountPerTarget
            resource_label: "{{ alb_out.load_balancer_arn }}"
          target_value: 75.0

    - name: Insert Private IPs of ASG Instances to a File
      blockinfile:
        path: "provisioning/group_vars/hostsip"
        block: |
          {% for instance in web_asg.instances %}
          web{{ loop.index }}: {{ instance.private_ip_address }}
          {% endfor %}

    - name: Copy login key to provisioning directory
      copy:
        src: "./site_loginkey.pem"
        dest: "provisioning/site_loginkey.pem"
        mode: 0400

    - name: Create Dynamic Inventory
      blockinfile:
        path: "provisioning/inventory"
        block: |
          {% for instance in web_asg.instances %}
          web{{ loop.index }} ansible_host={{ instance.private_ip_address }}
          {% endfor %}
          cntl ansible_host=127.0.0.1 ansible_connection=local

          [websrvgrp]
          {% for instance in web_asg.instances %}
          web{{ loop.index }}
          {% endfor %}

          [control]
          cntl

          [stack_inst:children]
          websrvgrp

          [stack_inst:vars]
          ansible_user=ubuntu
          ansible_ssh_private_key_file=site_loginkey.pem